1. NoSql databases:

	A NoSQL database is a non-relational and largely distributed database system that enables rapid, deals with extremely high-volume data which can be structured, semi or even unstructured.
In general, NoSQL databases have become the first alternative to relational databases, with scalability, availability, and fault tolerance being key deciding factors. 
NoSQL databases targets large sets of distributed data.

Features of NoSql databases:

can store complex datatypes like maps, sets, arrays.

Data is stored in single tables as compared to joining multiple tables.

Horizontal scalable.

Commodity hardware -  Adding more of the economical servers allows NoSQL databases to scale to handle more data.

Highly distributable - Distributed databases can store and process a set of information on more than one device.



=====================================================


2. Types of  NoSql databases:

Types of NoSQL Databases
There are four general types of NoSQL databases, each with their own specific attributes:

1.	Graph database – Based on graph theory, these databases are designed for data whose relations are well represented as a graph and has elements which are interconnected, with an undetermined number of relations between them. Examples include: Neo4j and Titan.

2.	Key-Value store –  These databases are designed for storing data in a schema-less way. In a key-value store, all of the data within consists of an indexed key and a value, hence the name. 
Example : Cassandra, DyanmoDB, Azure Table Storage (ATS), BerkeleyDB.

3.	Column store / column oriented Database – (also known as wide-column stores) instead of storing data in rows, these databases are designed for storing data tables as sections of columns of data, rather than as rows of data. While this simple description sounds like the inverse of a standard database, wide-column stores offer very high performance and a highly scalable architecture. 
Examples include: HBase, BigTable and HyperTable.

4.	Document database – expands on the basic idea of key-value stores where “documents” contain more complex in that they contain data and each document is assigned a unique key, which is used to retrieve the document. These are designed for storing, retrieving, and managing document-oriented information, also known as semi-structured data. 
Examples include: MongoDB and CouchDB.


=======================================================


3. CAP theorm:

CAP theorm is defined as:

Consistency - This means that the data in the database remains consistent after the execution of an operation. For example after an update operation, all clients see the same data.

	
Availability - This means that the system is always on (service guarantee availability), no downtime. 


Partition Tolerance - This means that the system continues to function even if the communication among the servers is unreliable, i.e. the servers may be partitioned into
multiple groups that cannot communicate with one another.

Important points:


	* If data on one machine changes, the update propagates to the other

	* Machine, system is inconsistent, but will become eventually consistent.

	* If duplicate copy of same data is not maintained, consistency is superior

	* But availability decreases.

	* Duplicate Copy of same data is maintained on Multiple Machines.

	* This increases availability, but decreases consistency.



=============================================================================


4. HBase architecture:


HBase architecture also follows master - slave type and this consists of three main components.

The Hadoop DataNode stores the data that the Region Server is managing.

• All HBase data is stored in HDFS files.

• The NameNode maintains metadata information for all the physical data blocks that

comprise the files.


1.Regions and Region servers:

	* Regions are nothing but actual table data that are split up and spread across the region servers.

	* HBase Tables are divided horizontally by row key range into “Regions.”

	*  A region contains all rows in the table between the region’s start key and end key.

	* Regions are assigned to the nodes in the cluster, called “Region Servers,” and these serve data for reads and writes.

	* A region server can serve about 1,000 regions.


2. HMaster:

	* Assigns regions to region servers and takes help of zookeeper for this.

	* Handles load balancing of regions accross region servers

	* DDL (create, delete tables) operations are handled by the HBase Master.

A master is responsible for:

• Coordinating the region servers

• Assigning regions on startup

• Re-assigning regions for recovery or load balancing

• Monitoring all RegionServer instances in the cluster (listens for notifications from zookeeper)


3. Zookeeper:

	* HBase uses ZooKeeper as a distributed coordination service to maintain server state in the cluster.

	* Zookeeper maintains which servers are alive and available, and provides server failure notification.

	* Zookeeper uses consensus to guarantee common shared state. Note that there should be three or five machines for consensus.




========================================================


5. HBase vs RDBMS

HBase

NoSql ----A Schema-less ,i.e there is no predefined schema for HBase tables.

Built for wide tables. It is horizontally scalable.

No transactions are there in HBase.

It has de-normalized data.

It is good for semi-structured as well as structured data.

Good with sparse tables 


RDBMS:

RDBMS Tables have Fixed  schema, which describes the whole structure of tables.

It is thin and built for small tables. Hard to scale.

RDBMS is transactional.

It will have normalized data.

It is good for structured data.

Not optimized for sparse data.

